[uwsgi]
#配置socket,用于与nginx通信
socket = :10010
chmod-socket = 666

#虚拟环境路径
virtualenv = /var/www/adsupport/venv

#配置入口模块
wsgi-file = /var/www/adsupport/main.py
callable = app

#启用 master 进程，管理 worker，默认应该为true
master = true
procname-master = 'uwsgi-adsupport-master'

#先创建woker再加载app,否则定时任务无法执行
lazy-apps=true

#进程和线程配置,master=false时procname无效
#processes = 2
threads = 3
procname= 'uwsgi-adsupport'
enable-threads = true

#log 在 master 中处理 
log-master = true

#使用单独的线程处理插件化 logger
threaded-logger = true

#日志分割大小10M
log-maxsize = 10000000

#日志格式
log-format =[%(ctime)] [%(addr)-%(user)] "%(method) %(uri)" (%(proto) %(status)) "%(uagent)" (response in %(msecs) ms) 
#日志文件路径
#daemonize = /var/www/adsupport/logs/%n_uwsgi.log
logto = /var/www/adsupport/logs/%n_uwsgi.log

#python文件变更自动重载
#py-autoreload = 1

#必须设置python插件
plugin=python36

# 配置项目目录（此处设置为项目的根目录）
chdir = /var/www/adsupport

#pid文件和stats状态文件
pidfile = /run/uwsgi/%n.pid
stats = /run/uwsgi/%n.sock

# 设置工作进程使用虚拟内存超过 MB 就回收重启
reload-on-as = 1024

# 设置一个请求超时（秒），就丢弃掉
harakiri = 60
# 当一个请求被 harakiri 掉，输出一条日志
harakiri-verbose = true
